using System;
using CommandLine;
using System.IO;

namespace GLThreadGen
{
    public class CommandLineOptions
    {
        [Option('i', "input", Required = true, HelpText = "Header file to read.  Must be generated by GLAD.")]
        public string InputFile { get; set; }
        
        [Option('o', "outdir", Default = "generated", HelpText = "Directory in which to generate headers.")]
        public string OutDir { get; set; }
    }

    class Program
    {
        static void Main(string[] args)
        {
            CommandLineOptions options = null;
            var res = Parser.Default.ParseArguments<CommandLineOptions>(args).WithParsed<CommandLineOptions>(
                opts =>
                {
                    options = opts;
                }
            ).WithNotParsed(
                errors =>
                {
                    foreach (var v in errors)
                    {
                        if (v.Tag == ErrorType.HelpRequestedError)
                        {
                            return;
                        }
                    }

                    Console.Error.WriteLine("Failed to parse command line");
                    foreach (var v in errors)
                    {
                        Console.Error.WriteLine(v);
                    }
                }
            );

            if (options == null) { return; }

            if (!File.Exists(options.InputFile))
            {
                Console.Error.WriteLine($"Input file \"{options.InputFile}\" does not exist.");
                return;
            }

            Console.WriteLine("Initializing...");
            if (!Directory.Exists(options.OutDir))
            {
                try
                {
                    Directory.CreateDirectory(options.OutDir);
                    Console.WriteLine("Created output directory");
                }
                catch(Exception ex)
                {
                    Console.Error.WriteLine($"Failed to create output directory: {ex.Message}");
                }
            }

            HeaderParser parser = null;
            using (var inStream = new FileStream(options.InputFile, FileMode.Open, FileAccess.Read))
            {
                parser = new HeaderParser(inStream);
                parser.Parse();
            }

            var generator = new CodeGenerator(options.OutDir, parser);
            generator.Generate();
            //generator.OpenDirectory();
        }
    }
}
