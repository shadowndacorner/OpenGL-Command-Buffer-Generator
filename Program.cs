using System;
using System.Threading.Tasks;
using CommandLine;
using System.IO;
using System.Net.Http;

namespace GLThreadGen
{
    public class CommandLineOptions
    {
        public const string KhronosXMLURL = "https://raw.githubusercontent.com/KhronosGroup/OpenGL-Registry/master/xml/gl.xml";

        [Option('w', "downloadxml", HelpText = "Specifies that the Khronos XML should be fetched directly from the KhronosGroup/OpenGL_Registry GitHub repository")]
        public bool UseWebFile { get; set; }

        [Option('x', "inputxml", HelpText = "Optional input XML file to read.  Used to generate type-safe bindings for command buffers.")]
        public string XMLInputFile { get; set; }

        [Option('i', "input", HelpText = "Input file to read.  Must be either a header file generated by GLAD.")]
        public string InputFile { get; set; }
        
        [Option('o', "outdir", Default = "generated", HelpText = "Directory in which to generate headers.")]
        public string OutDir { get; set; }
    }

    class Program
    {
        static void Main(string[] args)
        {
            CommandLineOptions options = null;
            var res = Parser.Default.ParseArguments<CommandLineOptions>(args).WithParsed<CommandLineOptions>(
                opts =>
                {
                    options = opts;
                }
            ).WithNotParsed(
                errors =>
                {
                    foreach (var v in errors)
                    {
                        if (v.Tag == ErrorType.HelpRequestedError)
                        {
                            return;
                        }
                    }

                    Console.Error.WriteLine("Failed to parse command line");
                    foreach (var v in errors)
                    {
                        Console.Error.WriteLine(v);
                    }
                }
            );

            if (options == null) { return; }

            if (!File.Exists(options.InputFile))
            {
                Console.Error.WriteLine($"Input file \"{options.InputFile}\" does not exist.");
                return;
            }

            if (!Directory.Exists(options.OutDir))
            {
                try
                {
                    Directory.CreateDirectory(options.OutDir);
                    Console.WriteLine("Created output directory");
                }
                catch(Exception ex)
                {
                    Console.Error.WriteLine($"Failed to create output directory: {ex.Message}");
                }
            }

            GLDataRegistry registry = new GLDataRegistry();
            // Read step
            {
                if (options.InputFile.EndsWith(".h"))
                {
                    Console.WriteLine("Parsing GLAD header from disk...");
                    using (var inStream = new FileStream(options.InputFile, FileMode.Open, FileAccess.Read))
                    {
                        var parser = new GLADHeaderParser(inStream, registry);
                        parser.Parse();
                    }
                }
                else
                {
                    Console.Error.WriteLine($"Input file must be either a Khronos XML document or a header generated by GLAD");
                    return;
                }

                if (options.UseWebFile)
                {
                    using (var client = new HttpClient())
                    {
                        Console.WriteLine($"Downloading {CommandLineOptions.KhronosXMLURL}...");
                        Stream stream = null;
                        Task.Run(async ()=>
                        {
                            stream = await client.GetStreamAsync(CommandLineOptions.KhronosXMLURL);
                        }).Wait();

                        using (stream)
                        {
                            Console.WriteLine($"Parsing XML...");
                            var parser = new KhronosXMLParser(stream, registry);
                            parser.Parse();
                        }
                    }
                }
                else if (options.XMLInputFile != null)
                {
                    if (File.Exists(options.XMLInputFile))
                    {
                        Console.WriteLine("Reading Khronos XML from disk...");
                        using (var inStream = new FileStream(options.XMLInputFile, FileMode.Open, FileAccess.Read))
                        {
                            Console.WriteLine($"Parsing XML...");
                            var parser = new KhronosXMLParser(inStream, registry);
                            parser.Parse();
                        }
                    }
                    else
                    {
                        Console.Error.WriteLine("Input XML file does not exist.  Use -w to fetch it from GitHub.");
                        return;
                    }
                }
            }

            // Post process
            Console.WriteLine($"Read {registry.Functions.Count} functions, post processing...");

            var tracker = new CodegenOverrideTracker(registry);
            tracker.Initialize();

            foreach(var func in registry.Functions.Values)
            {
                var list = tracker.GetOverrideList(func.Name);
                if (list != null)
                {
                    foreach(var ovr in list)
                    {
                        ovr.ModifyFunctionEntry?.Invoke(func);
                    }
                }
            }

            // Write step
            Console.WriteLine("Generating code...");
            var generator = new CodeGenerator(options.OutDir, registry, tracker);
            generator.Generate();
            //generator.OpenDirectory();
            Console.WriteLine("Done");
        }
    }
}
